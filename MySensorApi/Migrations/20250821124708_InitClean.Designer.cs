// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MySensorApi.Data;

#nullable disable

namespace MySensorApi.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250821124708_InitClean")]
    partial class InitClean
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MySensorApi.Models.ComfortRecommendation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Recommendation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SensorOwnershipId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SensorOwnershipId", "CreatedAt");

                    b.ToTable("ComfortRecommendations");
                });

            modelBuilder.Entity("MySensorApi.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            RoleName = "User"
                        },
                        new
                        {
                            Id = 2,
                            RoleName = "Admin"
                        });
                });

            modelBuilder.Entity("MySensorApi.Models.SensorData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<float?>("Altitude")
                        .HasColumnType("real");

                    b.Property<string>("ChipId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<bool?>("GasDetected")
                        .HasColumnType("bit");

                    b.Property<float?>("HumidityBme")
                        .HasColumnType("real");

                    b.Property<float?>("HumidityDht")
                        .HasColumnType("real");

                    b.Property<bool?>("Light")
                        .HasColumnType("bit");

                    b.Property<int?>("LightAnalog")
                        .HasColumnType("int");

                    b.Property<float?>("LightAnalogPercent")
                        .HasColumnType("real");

                    b.Property<int?>("Mq2Analog")
                        .HasColumnType("int");

                    b.Property<float?>("Mq2AnalogPercent")
                        .HasColumnType("real");

                    b.Property<float?>("Pressure")
                        .HasColumnType("real");

                    b.Property<float?>("TemperatureBme")
                        .HasColumnType("real");

                    b.Property<float?>("TemperatureDht")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.ToTable("SensorData");
                });

            modelBuilder.Entity("MySensorApi.Models.SensorOwnership", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ChipId")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoomName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<long>("Version")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ChipId");

                    b.HasIndex("UserId");

                    b.HasIndex("ChipId", "UserId")
                        .IsUnique();

                    b.ToTable("SensorOwnerships");
                });

            modelBuilder.Entity("MySensorApi.Models.Setting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<float?>("HighValue")
                        .HasColumnType("real");

                    b.Property<string>("HighValueMessage")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<float?>("LowValue")
                        .HasColumnType("real");

                    b.Property<string>("LowValueMessage")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ParameterName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("ParameterName")
                        .IsUnique();

                    b.ToTable("Settings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            HighValue = 25f,
                            HighValueMessage = "Занадто душно. Провітріть або ввімкніть кондиціонер.",
                            LowValue = 18f,
                            LowValueMessage = "Прохолодно. Зачиніть вікно або ввімкніть обігрів.",
                            ParameterName = "temperature"
                        },
                        new
                        {
                            Id = 2,
                            HighValue = 60f,
                            HighValueMessage = "Висока вологість. Провітріть приміщення.",
                            LowValue = 30f,
                            LowValueMessage = "Сухе повітря. Зволожте кімнату.",
                            ParameterName = "humidity"
                        },
                        new
                        {
                            Id = 3,
                            HighValue = 1f,
                            HighValueMessage = "Виявлено газ/забруднення. Провітріть негайно.",
                            ParameterName = "gas"
                        });
                });

            modelBuilder.Entity("MySensorApi.Models.SettingsUserAdjustment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<float>("HighValueAdjustment")
                        .HasColumnType("real");

                    b.Property<float>("LowValueAdjustment")
                        .HasColumnType("real");

                    b.Property<int>("SettingId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SettingId");

                    b.HasIndex("UserId", "SettingId", "CreatedAt");

                    b.HasIndex("UserId", "SettingId", "Version")
                        .IsUnique();

                    b.ToTable("SettingsUserAdjustments");
                });

            modelBuilder.Entity("MySensorApi.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RefreshTokenExpiryTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("MySensorApi.Models.ComfortRecommendation", b =>
                {
                    b.HasOne("MySensorApi.Models.SensorOwnership", "SensorOwnership")
                        .WithMany()
                        .HasForeignKey("SensorOwnershipId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SensorOwnership");
                });

            modelBuilder.Entity("MySensorApi.Models.SensorOwnership", b =>
                {
                    b.HasOne("MySensorApi.Models.User", "User")
                        .WithMany("SensorOwnerships")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MySensorApi.Models.SettingsUserAdjustment", b =>
                {
                    b.HasOne("MySensorApi.Models.Setting", "Setting")
                        .WithMany("Adjustments")
                        .HasForeignKey("SettingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MySensorApi.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Setting");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MySensorApi.Models.User", b =>
                {
                    b.HasOne("MySensorApi.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("MySensorApi.Models.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("MySensorApi.Models.Setting", b =>
                {
                    b.Navigation("Adjustments");
                });

            modelBuilder.Entity("MySensorApi.Models.User", b =>
                {
                    b.Navigation("SensorOwnerships");
                });
#pragma warning restore 612, 618
        }
    }
}
